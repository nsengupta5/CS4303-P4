!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Java	a,annotation	/annotation declarations/
!_TAG_KIND_DESCRIPTION!Java	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Java	e,enumConstant	/enum constants/
!_TAG_KIND_DESCRIPTION!Java	f,field	/fields/
!_TAG_KIND_DESCRIPTION!Java	g,enum	/enum types/
!_TAG_KIND_DESCRIPTION!Java	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Java	m,method	/methods/
!_TAG_KIND_DESCRIPTION!Java	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Java	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/nsengupta5/Documents/StAndrews/Fourth/cs4303/Practicals/Game/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!Java!package	imported	/imported package/
Block	Block.pde	/^  public Block (int x, int y, int blockWidth, int blockHeight, int xVel, int yVel, float invM, i/;"	m	class:Block
Block	Block.pde	/^final class Block extends Particle {$/;"	c
Button	Button.pde	/^  public Button (float x, float y, int buttonWidth, int buttonHeight, int buttonRadius, color bu/;"	m	class:Button
Button	Button.pde	/^final class Button {$/;"	c
CS4303-P4	README.md	/^# CS4303-P4$/;"	c
Drag	Drag.pde	/^  Drag(float k1, float k2) {$/;"	m	class:Drag
Drag	Drag.pde	/^public final class Drag extends ForceGenerator {$/;"	c
EndScreen	EndScreen.pde	/^  public EndScreen(float buttonInitX, float buttonInitY, int buttonWidth, int buttonHeight, int /;"	m	class:EndScreen
EndScreen	EndScreen.pde	/^final class EndScreen {$/;"	c
ForceGenerator	ForceGenerator.pde	/^abstract class ForceGenerator {$/;"	c
ForceRegistration	ForceRegistry.pde	/^    ForceRegistration(Particle p, ForceGenerator fg) {$/;"	m	class:ForceRegistry.ForceRegistration
ForceRegistration	ForceRegistry.pde	/^  class ForceRegistration {$/;"	c	class:ForceRegistry
ForceRegistry	ForceRegistry.pde	/^class ForceRegistry {$/;"	c
Gravity	Gravity.pde	/^  Gravity(PVector gravity) {$/;"	m	class:Gravity
Gravity	Gravity.pde	/^public final class Gravity extends ForceGenerator {$/;"	c
Particle	Particle.pde	/^  Particle(int x, int y, float xVel, float yVel, float invM) {$/;"	m	class:Particle
Particle	Particle.pde	/^abstract class Particle {$/;"	c
Platform	Platform.pde	/^  public Platform (int x, int y, int xVel, int yVel, float invMLower, float invMUpper, int pLeng/;"	m	class:Platform
Platform	Platform.pde	/^final class Platform {$/;"	c
Player	Player.pde	/^  Player(int x, int y, float xVel, float yVel, float invM, int animationWidth, int animationHeig/;"	m	class:Player
Player	Player.pde	/^final class Player extends Particle {$/;"	c
Wind	Wind.pde	/^  Wind(PVector wind) {$/;"	m	class:Wind
Wind	Wind.pde	/^public final class Wind extends ForceGenerator {$/;"	c
World	World.pde	/^  public World(int xVel, int yVel, float invMLower, float invMUpper, int groundHeight, int minNu/;"	m	class:World
World	World.pde	/^final class World {$/;"	c
active	Button.pde	/^  boolean active = true;$/;"	f	class:Button
add	ForceRegistry.pde	/^  void add(Particle p, ForceGenerator fg) {$/;"	m	class:ForceRegistry
addBlock	Platform.pde	/^  void addBlock(Block block) {$/;"	m	class:Platform
addForce	Particle.pde	/^  void addForce(PVector force) {$/;"	m	class:Particle
animationHeight	Player.pde	/^  int animationHeight;$/;"	f	class:Player
animationWidth	Player.pde	/^  int animationWidth;$/;"	f	class:Player
attack	Player.pde	/^  void attack(){$/;"	m	class:Player
attackBox	Player.pde	/^  Rectangle2D attackBox;$/;"	f	class:Player
attackBoxScale	Player.pde	/^  int attackBoxScale;$/;"	f	class:Player
attackFrames	Player.pde	/^  PImage[] attackFrames;$/;"	f	class:Player
attacking	Player.pde	/^  boolean attacking = false;$/;"	f	class:Player
blockColor	Block.pde	/^  color blockColor;$/;"	f	class:Block
blockColor	Platform.pde	/^  color blockColor;$/;"	f	class:Platform
blockColor	World.pde	/^  color blockColor;$/;"	f	class:World
blockHeight	Block.pde	/^  int blockWidth, blockHeight;$/;"	f	class:Block
blockHeight	Platform.pde	/^  int blockWidth, blockHeight;$/;"	f	class:Platform
blockHeight	World.pde	/^  int blockWidth, blockHeight;$/;"	f	class:World
blockWidth	Block.pde	/^  int blockWidth, blockHeight;$/;"	f	class:Block
blockWidth	Platform.pde	/^  int blockWidth, blockHeight;$/;"	f	class:Platform
blockWidth	World.pde	/^  int blockWidth, blockHeight;$/;"	f	class:World
blocks	Platform.pde	/^  ArrayList<Block> blocks;$/;"	f	class:Platform
buttonColor	Button.pde	/^  color buttonColor, buttonHoverColor, buttonTextColor;$/;"	f	class:Button
buttonColor	EndScreen.pde	/^  color buttonColor, textColor;$/;"	f	class:EndScreen
buttonHeight	Button.pde	/^  int buttonWidth, buttonHeight;$/;"	f	class:Button
buttonHover	Button.pde	/^  boolean buttonHover = false;$/;"	f	class:Button
buttonHoverColor	Button.pde	/^  color buttonColor, buttonHoverColor, buttonTextColor;$/;"	f	class:Button
buttonRadius	Button.pde	/^  int buttonRadius;$/;"	f	class:Button
buttonTextColor	Button.pde	/^  color buttonColor, buttonHoverColor, buttonTextColor;$/;"	f	class:Button
buttonWidth	Button.pde	/^  int buttonWidth, buttonHeight;$/;"	f	class:Button
buttonX	Button.pde	/^  float buttonX, buttonY;$/;"	f	class:Button
buttonY	Button.pde	/^  float buttonX, buttonY;$/;"	f	class:Button
characterIndex	Player.pde	/^  int characterIndex;$/;"	f	class:Player
characters	Player.pde	/^  String[] characters = new String[]{$/;"	f	class:Player
checkHit	Game.pde	/^void checkHit(){$/;"	m
checkIfAirborne	Player.pde	/^boolean checkIfAirborne(ForceRegistry registry, Gravity gravity) {$/;"	m	class:Player
checkPlatformCollisions	World.pde	/^  boolean checkPlatformCollisions(Platform p) {$/;"	m	class:World
checkWinner	Game.pde	/^void checkWinner() {$/;"	m
clear	ForceRegistry.pde	/^  void clear() {$/;"	m	class:ForceRegistry
collides	Platform.pde	/^  boolean collides(Platform p) {$/;"	m	class:Platform
content	Button.pde	/^  String content;$/;"	f	class:Button
createPlatform	Platform.pde	/^  void createPlatform() {$/;"	m	class:Platform
currentFrame	Player.pde	/^  int currentFrame = 0;$/;"	f	class:Player
currentFrames	Player.pde	/^  PImage[] currentFrames;$/;"	f	class:Player
draw	Block.pde	/^  void draw(){$/;"	m	class:Block
draw	Button.pde	/^  void draw() {$/;"	m	class:Button
draw	EndScreen.pde	/^  void draw(){$/;"	m	class:EndScreen
draw	Game.pde	/^void draw() {$/;"	m
draw	Platform.pde	/^  void draw(){$/;"	m	class:Platform
draw	Player.pde	/^  void draw(){$/;"	m	class:Player
draw	World.pde	/^  void draw() {$/;"	m	class:World
drawHealthBars	Game.pde	/^void drawHealthBars(){$/;"	m
drawHitbox	Player.pde	/^  void drawHitbox(boolean intersects){$/;"	m	class:Player
drawHitboxes	Game.pde	/^void drawHitboxes(){$/;"	m
endButton	EndScreen.pde	/^  Button endButton;$/;"	f	class:EndScreen
facingRight	Player.pde	/^  boolean facingRight = true;$/;"	f	class:Player
forceAccumulator	Particle.pde	/^  PVector forceAccumulator; $/;"	f	class:Particle
forceGenerator	ForceRegistry.pde	/^    public final ForceGenerator forceGenerator ;$/;"	f	class:ForceRegistry.ForceRegistration
generatePlatforms	World.pde	/^  void generatePlatforms() {$/;"	m	class:World
getDirection	Wind.pde	/^  String getDirection() {$/;"	m	class:Wind
getMag	Wind.pde	/^  float getMag() {$/;"	m	class:Wind
getMass	Particle.pde	/^  public float getMass() {$/;"	m	class:Particle
gravity	Gravity.pde	/^  private PVector gravity ;$/;"	f	class:Gravity	file:
groundHeight	World.pde	/^  int groundHeight;$/;"	f	class:World
health	Player.pde	/^  int health;$/;"	f	class:Player
hitboxScale	Player.pde	/^  int hitboxScale;$/;"	f	class:Player
idle	Player.pde	/^  boolean idle = true;$/;"	f	class:Player
idleFrames	Player.pde	/^  PImage[] idleFrames;$/;"	f	class:Player
integrate	Particle.pde	/^  void integrate() {$/;"	m	class:Particle
invMass	Particle.pde	/^  float invMass ;$/;"	f	class:Particle
isAirborne	Player.pde	/^  boolean isAirborne = false;$/;"	f	class:Player
isDead	Player.pde	/^  boolean isDead() {$/;"	m	class:Player
jump	Player.pde	/^  void jump() {$/;"	m	class:Player
jumpIncrement	Player.pde	/^  int jumpIncrement;$/;"	f	class:Player
k1	Drag.pde	/^  private float k1 ;$/;"	f	class:Drag	file:
k2	Drag.pde	/^  private float k2 ;$/;"	f	class:Drag	file:
keyPressed	Game.pde	/^void keyPressed() { $/;"	m
keyReleased	Game.pde	/^void keyReleased(){$/;"	m
leftLimit	Player.pde	/^  float leftLimit, rightLimit;$/;"	f	class:Player
loadTextures	Player.pde	/^  void loadTextures(String characterName){$/;"	m	class:Player
lowerLimit	Player.pde	/^  float upperLimit, lowerLimit;$/;"	f	class:Player
mainMenu	EndScreen.pde	/^  Button mainMenu;$/;"	f	class:EndScreen
maxHealth	Player.pde	/^  int maxHealth;$/;"	f	class:Player
maxNumPlatforms	World.pde	/^  int maxNumPlatforms;$/;"	f	class:World
maxPlatformLength	World.pde	/^  int maxPlatformLength;$/;"	f	class:World
minNumPlatforms	World.pde	/^  int minNumPlatforms;$/;"	f	class:World
minPlatformLength	World.pde	/^  int minPlatformLength;$/;"	f	class:World
monkScale	Player.pde	/^  int monkScale;$/;"	f	class:Player
moveIncrement	Player.pde	/^  int moveIncrement;$/;"	f	class:Player
moveLeft	Player.pde	/^  void moveLeft() {$/;"	m	class:Player
moveRight	Player.pde	/^  void moveRight() {$/;"	m	class:Player
movingLeft	Player.pde	/^  boolean movingLeft = false;$/;"	f	class:Player
movingRight	Player.pde	/^  boolean movingRight = false;$/;"	f	class:Player
newGameButton	EndScreen.pde	/^  Button newGameButton;$/;"	f	class:EndScreen
particle	ForceRegistry.pde	/^    public final Particle particle ;$/;"	f	class:ForceRegistry.ForceRegistration
particleInvMLower	Platform.pde	/^  float particleInvMLower, particleInvMUpper;$/;"	f	class:Platform
particleInvMLower	World.pde	/^  float particleInvMLower, particleInvMUpper;$/;"	f	class:World
particleInvMUpper	Platform.pde	/^  float particleInvMLower, particleInvMUpper;$/;"	f	class:Platform
particleInvMUpper	World.pde	/^  float particleInvMLower, particleInvMUpper;$/;"	f	class:World
particleXVel	Platform.pde	/^  int particleXVel, particleYVel;$/;"	f	class:Platform
particleXVel	World.pde	/^  int particleXVel, particleYVel;$/;"	f	class:World
particleYVel	Platform.pde	/^  int particleXVel, particleYVel;$/;"	f	class:Platform
particleYVel	World.pde	/^  int particleXVel, particleYVel;$/;"	f	class:World
platformHeight	Platform.pde	/^  int platformHeight;$/;"	f	class:Platform
platformLength	Platform.pde	/^  int platformLength;$/;"	f	class:Platform
platformWidth	Platform.pde	/^  int platformWidth;$/;"	f	class:Platform
platforms	World.pde	/^  ArrayList<Platform> platforms;$/;"	f	class:World
playerBox	Player.pde	/^  Rectangle2D playerBox;$/;"	f	class:Player
position	Particle.pde	/^  public PVector position, velocity;$/;"	f	class:Particle
position	Platform.pde	/^  PVector position;$/;"	f	class:Platform
registrations	ForceRegistry.pde	/^  ArrayList<ForceRegistration> registrations = new ArrayList() ;$/;"	f	class:ForceRegistry
remove	ForceRegistry.pde	/^  void remove(Particle p, ForceGenerator fg) {$/;"	m	class:ForceRegistry
removeBlock	Platform.pde	/^  void removeBlock(Block block) {$/;"	m	class:Platform
rightLimit	Player.pde	/^  float leftLimit, rightLimit;$/;"	f	class:Player
row	Block.pde	/^  int row;$/;"	f	class:Block
runFrames	Player.pde	/^  PImage[] runFrames;  $/;"	f	class:Player
select	Button.pde	/^  void select() {$/;"	m	class:Button
selected	Button.pde	/^  boolean selected = false;$/;"	f	class:Button
set	Wind.pde	/^  void set(float x, float y) {$/;"	m	class:Wind
setActive	Button.pde	/^  void setActive() {$/;"	m	class:Button
setContent	Button.pde	/^  void setContent(String newContent) {$/;"	m	class:Button
setGravity	Gravity.pde	/^  void setGravity(float x, float y) {$/;"	m	class:Gravity
setInactive	Button.pde	/^  void setInactive() {$/;"	m	class:Button
setRandomDirection	Wind.pde	/^  void setRandomDirection() {$/;"	m	class:Wind
setup	Game.pde	/^void setup() {$/;"	m
setupForces	Game.pde	/^void setupForces() {$/;"	m
setupPlayers	Game.pde	/^void setupPlayers() {$/;"	m
setupScreens	Game.pde	/^void setupScreens() {$/;"	m
setupTheme	Game.pde	/^void setupTheme() {$/;"	m
setupWorld	Game.pde	/^void setupWorld() {$/;"	m
swapCharacter	Player.pde	/^  boolean swapCharacter = false;$/;"	f	class:Player
textColor	EndScreen.pde	/^  color buttonColor, textColor;$/;"	f	class:EndScreen
unselect	Button.pde	/^  void unselect() {$/;"	m	class:Button
update	Button.pde	/^  void update() {$/;"	m	class:Button
updateForce	Drag.pde	/^  public void updateForce(Particle particle) {$/;"	m	class:Drag
updateForce	ForceGenerator.pde	/^  abstract void updateForce(Particle p) ;$/;"	m	class:ForceGenerator
updateForce	Gravity.pde	/^  void updateForce(Particle particle) {$/;"	m	class:Gravity
updateForce	Wind.pde	/^  void updateForce(Particle particle) {$/;"	m	class:Wind
updateForces	ForceRegistry.pde	/^  void updateForces() {$/;"	m	class:ForceRegistry
updateTextColor	EndScreen.pde	/^  void updateTextColor(color newColor) {$/;"	m	class:EndScreen
updateWinner	EndScreen.pde	/^  void updateWinner(String winner) {$/;"	m	class:EndScreen
upperLimit	Player.pde	/^  float upperLimit, lowerLimit;$/;"	f	class:Player
velocity	Particle.pde	/^  public PVector position, velocity;$/;"	f	class:Particle
wind	Wind.pde	/^  private PVector wind ;$/;"	f	class:Wind	file:
winner	EndScreen.pde	/^  String winner;$/;"	f	class:EndScreen
